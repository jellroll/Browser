//
//  ViewController.swift
//  Browser
//
//  Created by Jennifer Brisbane on 1/9/16.
//  Copyright © 2016 jellroll. All rights reserved.
//

import UIKit
import WebKit

let MessageHandler = "didGetPosts"

let PostSelected = "postSelected"

class ViewController: UIViewController, UITextFieldDelegate, WKNavigationDelegate, WKScriptMessageHandler {


    var webView: WKWebView = WKWebView()
    
    
    var postsWebView: WKWebView?
    
    
    var posts: [Post] = []
    
    @IBOutlet weak var barView: UIView!
    @IBOutlet weak var urlField: UITextField!
    @IBOutlet weak var backButton: UIBarButtonItem!
    @IBOutlet weak var forwardButton: UIBarButtonItem!
    @IBOutlet weak var reloadButton: UIBarButtonItem!
    @IBOutlet weak var progressView: UIProgressView!
    @IBOutlet weak var recentPostsButton: UIBarButtonItem!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Since you can’t apply auto layout constraints within a navigation bar,
        // set its size in code.
        // This will set the size of the barView when the app loads.
            
        barView.frame = CGRect(x:0, y: 0, width: view.frame.width, height: 30)
        
        // add the webView to the main view
        //view.addSubview(webView)
        view.insertSubview(webView, belowSubview: progressView)
        
        // disable autogenerated constraints
        webView.translatesAutoresizingMaskIntoConstraints = false;
        
        // define the height and width constraints for the webView.
        // The webView will have the same height and width as its superview’s height and width.
        //let height = NSLayoutConstraint(item: webView, attribute: .Height, relatedBy: .Equal, toItem: view, attribute: .Height, multiplier: 1, constant: 0)
        let height = NSLayoutConstraint(item: webView, attribute: .Height, relatedBy: .Equal, toItem: view, attribute: .Height, multiplier: 1, constant: -44)
        let width = NSLayoutConstraint(item: webView, attribute: .Width, relatedBy: .Equal, toItem: view, attribute: .Width, multiplier: 1, constant: 0)
        view.addConstraints([height, width])

        
        // add the class as an observer of the "loading" property
        webView.addObserver(self, forKeyPath: "loading", options: .New, context: nil)

        // add the class as an observer of the "estimatedProgress" property
        webView.addObserver(self, forKeyPath: "estimatedProgress", options: .New, context: nil)
        
        // add the class as an observer of the "title" property
        webView.addObserver(self, forKeyPath: "title", options: .New, context: nil)
        
        // open a URL when the app starts
        let url = NSURL(string:"http://www.appcoda.com")
        let request = NSURLRequest(URL:url!)
        webView.loadRequest(request)
        
        backButton.enabled = false
        forwardButton.enabled = false
        
        
        // disable until the posts list is loaded
        recentPostsButton.enabled = false
        
        let config = WKWebViewConfiguration()
        let scriptURL = NSBundle.mainBundle().pathForResource("getPosts", ofType: "js")

        do {

            let scriptContent = try String(contentsOfFile:scriptURL!, encoding:NSUTF8StringEncoding)
            let script = WKUserScript(source: scriptContent, injectionTime: .AtDocumentEnd, forMainFrameOnly: true)
            config.userContentController.addUserScript(script)
            config.userContentController.addScriptMessageHandler(self, name: MessageHandler)
            
        } catch {
            print(error)
        }
        
        postsWebView = WKWebView(frame: CGRectZero, configuration: config)
        postsWebView!.loadRequest(NSURLRequest(URL:NSURL(string:"http://www.appcoda.com")!))
        
        // Set the view controller as an observer of the notifications posted when a cell is selected in the table view.
        NSNotificationCenter.defaultCenter().addObserver(self, selector: "postSelected:", name: PostSelected, object: nil)


    }
    
    // "required" means that if this class has any subclasses,
    // they would inherit or implement this same initializer
    required init(coder aDecoder: NSCoder) {
    
        
        // Create a WKWebViewConfiguration object which holds some properties that allow the creation of the bridge
        // between native code and the hosted web content.
        let config = WKWebViewConfiguration()

        // Specify the location of the local JavaScript file.
        let scriptURL = NSBundle.mainBundle().pathForResource("hideSections", ofType: "js")
        
        // When creating the instance of WKUserScript, we specify when the script should be injected and whether it acts on the whole page
        // or a specific frame.
        do {
            // Wrap the JavaScript content in an instance of WKUserScript
            let scriptContent = try String(contentsOfFile:scriptURL!, encoding: NSUTF8StringEncoding)
            
            print(scriptContent)
            
            let script = WKUserScript(source: scriptContent, injectionTime: .AtDocumentStart, forMainFrameOnly: true)
            
            // Add the script to the configuration’s userContentController so that the webView is initialized with the configuration.
            config.userContentController.addUserScript(script)
        } catch {
            print(error)
        }
        
        
        self.webView = WKWebView(frame: CGRectZero, configuration: config)
        super.init(coder: aDecoder)!

        // The WKWebView has a property named navigationDelegate which expects an object that conforms to the WKNavigationDelegate protocol.
        // The protocol provides methods dealing with navigation events, including loading errors.
        // The class will be the navigation delegate of the web view.
        self.webView.navigationDelegate = self
    }
    
    // This will set the size of the barView when the device orientation changes.
    override func viewWillTransitionToSize(size: CGSize, withTransitionCoordinator coordinator: UIViewControllerTransitionCoordinator) {
        barView.frame = CGRect(x:0, y: 0, width: size.width, height: 30)
    }
    
    
    func textFieldShouldReturn(textField: UITextField) -> Bool {
        urlField.resignFirstResponder()
        webView.loadRequest(NSURLRequest(URL: NSURL(string: appendHttpIfNecessary(urlField.text!))!))
        return false
    }
    
    func appendHttpIfNecessary(url: String) -> String {
        if url.hasPrefix("http://") {
            return url
        } else {
            return "http://" + url
        }
    }
    
    @IBAction func back(sender: UIBarButtonItem) {
        webView.goBack()
    }
    
    
    @IBAction func forward(sender: UIBarButtonItem) {
        webView.goForward()
    }
    
    @IBAction func reload(sender: UIBarButtonItem) {
        let request = NSURLRequest(URL:webView.URL!)
        webView.loadRequest(request)
        
    }
    
    
    // This function will be called whenever the observable property changes.
    // The state of the back and forward buttons will be changed according to the current state of the web view.
    override func observeValueForKeyPath(keyPath: String?, ofObject object: AnyObject?, change: [String : AnyObject]?, context: UnsafeMutablePointer<Void>) {
        
        if (keyPath == "loading") {
            backButton.enabled = webView.canGoBack
            forwardButton.enabled = webView.canGoForward
        }
        
        
        // Hide the progress view when it's not loading
        // Update the progress view as the value of estimatedProgress changes
        if (keyPath == "estimatedProgress") {
            progressView.hidden = webView.estimatedProgress == 1
            progressView.setProgress(Float(webView.estimatedProgress), animated: true)
        }
        
        
        // Grab the title of the currently loaded webpage, and assign it to the title which will appear in the navigation bar.
        // Localized title for use by a parent controller.
        if (keyPath == "title") {
            title = webView.title
        }
    }
    
    // This is the delegate method that gets called when there is an error.
    func webView(webView: WKWebView, didFailProvisionalNavigation navigation: WKNavigation!, withError error: NSError) {
        let alert = UIAlertController(title: "Error", message: error.localizedDescription, preferredStyle: .Alert)
        alert.addAction(UIAlertAction(title: "Ok", style: .Default, handler: nil))
        presentViewController(alert, animated: true, completion: nil)
    }
    
    // This is a WKNavigationDelegate protocol method that gets called when the page load completes.
    // Use it here to reset the progress view value after each request.
    func webView(webView: WKWebView, didFinishNavigation navigation: WKNavigation!) {
        progressView.setProgress(0.0, animated: false)
    }
    
    // The WKNavigationDelegate protocol method gets called several times during the page load
    // One of its parameters is an WKNavigationAction object which contains information that can help you decide
    // whether to continue page load or not.
    // The following method uses two of its properties, navigationType and request.
    // We only want to interrupt external links that have been initiated by a user, so check for the navigationType.
    // Then check the request url to determine whether it is an external link.
    // If both conditions are met, then the URL is opened by the device’s browser (Safari)
    // and WKNavigationActionPolicy.Cancel stops the process.
    // Otherwise the page loads as usual and renders in the web view.
    func webView(webView: WKWebView, decidePolicyForNavigationAction navigationAction: WKNavigationAction, decisionHandler: ((WKNavigationActionPolicy) -> Void)) {
        if (navigationAction.navigationType == WKNavigationType.LinkActivated && !navigationAction.request.URL!.host!.lowercaseString.hasPrefix("www.appcoda.com")) {
            UIApplication.sharedApplication().openURL(navigationAction.request.URL!)
            decisionHandler(WKNavigationActionPolicy.Cancel)
        } else {
            decisionHandler(WKNavigationActionPolicy.Allow)
        }
    }

    // Required function of WKScriptMessageHandler protocol
    func userContentController(userContentController: WKUserContentController, didReceiveScriptMessage message: WKScriptMessage) {
        if (message.name == MessageHandler) {
            
            print("JavaScript is sending a message \(message.body)")
            
            // Check to see if the name of the received message matches with what we are expecting.
            // Extract the array of dictionaries attached to the message and create Post objects with this data before adding each post to the posts array.
            if let postsList = message.body as? [Dictionary<String, String>] {
                for ps in postsList {
                    let post = Post(dictionary: ps)
                    posts.append(post)
                }
                // Enable the recentPostsButton
                recentPostsButton.enabled = true
                
                print("postsList count:" + String(postsList.count))
            }
            
        }
    }
    
    

    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject!) {
        if (segue.identifier == "recentPosts") {
            let navigationController = segue.destinationViewController as! UINavigationController
            let postsViewController = navigationController.topViewController as! PostsTableViewController
            postsViewController.posts = posts
            
            print("posts count:" + String(posts.count))
        }
    }
    
    // Get the post object attached to the notification and loads the post URL in the web view.
    func postSelected(notification:NSNotification) {
        // webView.loadRequest(NSURLRequest())
        let post = notification.object as! Post
        webView.loadRequest(NSURLRequest(URL:NSURL(string:post.postURL)!))
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }


}

